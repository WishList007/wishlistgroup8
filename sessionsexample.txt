This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.mvn/
  wrapper/
    maven-wrapper.properties
src/
  main/
    java/
      com/
        example/
          sessions/
            controller/
              SessionController.java
            model/
              User.java
            repository/
              UserRepository.java
            service/
              UserService.java
            SessionsApplication.java
    resources/
      static/
        main.css
      templates/
        admin1.html
        admin2.html
        index.html
        login.html
      application.properties
  test/
    java/
      com/
        example/
          sessions/
            SessionsApplicationTests.java
.gitignore
mvnw
mvnw.cmd
pom.xml

================================================================
Files
================================================================

================
File: .mvn/wrapper/maven-wrapper.properties
================
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.7/apache-maven-3.8.7-bin.zip
wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.1/maven-wrapper-3.1.1.jar

================
File: src/main/java/com/example/sessions/controller/SessionController.java
================
package com.example.sessions.controller;

import com.example.sessions.model.User;
import com.example.sessions.service.UserService;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class SessionController {
    private UserService userService;

    public SessionController(UserService userService) {
        this.userService = userService;
    }

    private boolean isLoogedIn(HttpSession session) {
        return session.getAttribute("user") != null;
    }


    @GetMapping("/")
    public String index() {
        // return landing page
        return "index";
    }

    @GetMapping("login")
    public String showLogin() {
        // return login form
        return "login";
    }

    @PostMapping("login")
    public String login(@RequestParam("uid") String uid, @RequestParam("pw") String pw,
                        HttpSession session,
                        Model model) {

        if (userService.login(uid, pw)) {
            // create session for user and set session timeout to 30 sec (container default: 15 min)
            session.setAttribute("user", new User(uid, pw));
            session.setMaxInactiveInterval(30);
            // redirect to starting page - admin1
            return "redirect:/admin1";
        }
        // wrong credentials
        model.addAttribute("wrongCredentials", true);
        return "login";
    }

    @GetMapping("admin1")
    public String showAdm1(HttpSession session) {
        return isLoogedIn(session) ? "admin1" : "login";
    }

    @GetMapping("admin2")
    public String showAdm2(HttpSession session) {
        return isLoogedIn(session) ? "admin2" : "login";
    }

    @GetMapping("logout")
    public String logout(HttpSession session) {
        // invalidate session and return landing page
        session.invalidate();
        return "index";
    }
}

================
File: src/main/java/com/example/sessions/model/User.java
================
package com.example.sessions.model;

public class User {
    private String uid;
    private String pw;

    public User(String uid, String pw) {
        this.uid = uid;
        this.pw = pw;
    }

    public User() {
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    public String getPw() {
        return pw;
    }

    public void setPw(String pw) {
        this.pw = pw;
    }

    @Override
    public String toString() {
        return "User{" +
                "uid='" + uid + '\'' +
                ", pw='" + pw + '\'' +
                '}';
    }
}

================
File: src/main/java/com/example/sessions/repository/UserRepository.java
================
package com.example.sessions.repository;

import com.example.sessions.model.User;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;

@Repository
public class UserRepository {
    List<User> users = new ArrayList<>(List.of(
            new User("tima", "1234"),
            new User("many", "4321")

    ));

    public User getUser(String uid) {
        for (User user:users) {
            if (user.getUid().equals(uid))
                return user;
        }
        return null;
    }
}

================
File: src/main/java/com/example/sessions/service/UserService.java
================
package com.example.sessions.service;

import com.example.sessions.model.User;
import com.example.sessions.repository.UserRepository;
import org.springframework.stereotype.Service;

@Service
public class UserService {
    UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public boolean login(String uid, String pw) {
        User user = userRepository.getUser(uid);
        if (user != null)
            // user found - check credentials
            return user.getPw().equals(pw);
        // user not found
        return false;
    }
}

================
File: src/main/java/com/example/sessions/SessionsApplication.java
================
package com.example.sessions;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SessionsApplication {
	public static void main(String[] args) {
		SpringApplication.run(SessionsApplication.class, args);
	}
}

================
File: src/main/resources/static/main.css
================
body {
    max-width: 500px;
    margin: auto;
    background: white;
}


h1 {
    font-family:Arial;
    font-size: 1.5em;

}

label {
    width: 100px;
    display: inline-block;
}


table, th, td {
    border: 1px solid black;
    border-collapse: collapse;
    padding: 5px;
}


th {
    text-align: left;
}

.error {
    color: red;
}

================
File: src/main/resources/templates/admin1.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sessions</title>
    <link rel="stylesheet" th:href="@{/main.css}">
</head>
<body>
<h1>Admin1 page</h1>
<p><a th:href="@{'/admin2'}">Admin2</a></p>
<p><a th:href="@{'/logout'}">Logout</a></p>
</body>
</html>

================
File: src/main/resources/templates/admin2.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sessions</title>
    <link rel="stylesheet" th:href="@{/main.css}">
</head>
<body>
<h1>Admin2 page</h1>
<p><a th:href="@{'/admin1'}">Admin1</a></p>
<p><a th:href="@{'/logout'}">Logout</a></p>
</body>
</html>

================
File: src/main/resources/templates/index.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sessions</title>
    <link rel="stylesheet" th:href="@{/main.css}">
</head>
<body>
    <h1>Landing page</h1>
    <a th:href="@{'/login'}">Login</a>
</body>
</html>

================
File: src/main/resources/templates/login.html
================
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sessions</title>
    <link rel="stylesheet" th:href="@{/main.css}">
</head>
<body>
<h1>Login</h1>
<form action="/login" method="post">
    <p th:if="${wrongCredentials}" class="error">Forkert brugerid eller password</p>
    <p><label>UserId:</label>
        <input name="uid" type="text" autofocus></p>
    <p><label>Password:</label>
        <input name="pw" type="password"></p>
    <p>
        <button type="submit">Login</button>
        <a th:href="@{'/'}"><button type="button">Fortryd</button></a>
    </p>
</form>
</body>
</html>

================
File: src/main/resources/application.properties
================


================
File: src/test/java/com/example/sessions/SessionsApplicationTests.java
================
package com.example.sessions;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class SessionsApplicationTests {

	@Test
	void contextLoads() {
	}

}

